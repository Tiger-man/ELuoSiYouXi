var f=Object.defineProperty;var w=(c,t,e)=>t in c?f(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e;var u=(c,t,e)=>(w(c,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();const C=[[[0,0],[1,0],[1,1],[0,1]]],y=[[[0,0],[0,1],[0,2],[0,3]],[[0,0],[1,0],[2,0],[3,0]]],x=[[[0,0],[0,1],[0,2],[1,2]],[[0,0],[1,0],[2,0],[0,1]],[[0,0],[1,0],[1,1],[1,2]],[[0,1],[1,1],[2,1],[2,0]]],m=[[[0,0],[0,1],[0,2],[1,1]],[[0,0],[1,0],[2,0],[1,1]],[[0,1],[1,0],[1,1],[1,2]],[[0,1],[1,1],[2,1],[1,0]]],L=[[[0,0],[0,1],[1,1],[1,2]],[[0,1],[1,1],[1,0],[2,0]]],S=[[[1,0],[1,1],[0,1],[0,2]],[[0,0],[1,0],[1,1],[2,1]]];function d(c=0,t=1){const e=Math.min(c,t),i=Math.max(c,t)-e;return Math.floor(Math.random()*i+e)}function p(){return`rgb(${d(0,255)},${d(0,255)},${d(0,255)})`}class B{constructor(){u(this,"shapeList",[C,y,x,m,S,L]);u(this,"currentShapeCollect",{children:null,index:null})}next(){const t=d(0,this.shapeList.length),e=this.shapeList[t],s=d(0,e.length);return this.currentShapeCollect={children:e,index:s},this.currentShapeCollect.children[s]}changeShape(){const{children:t,index:e}=this.currentShapeCollect,s=e+1<=t.length-1?e+1:0;return this.currentShapeCollect.index=s,this.currentShapeCollect.children[s]}getCurrentShape(){const{children:t,index:e}=this.currentShapeCollect;return t[e]}}class N{constructor({ctx:t,cw:e,ch:s,width:i,height:n}){u(this,"borderWidth",2);this.ctx=t,this.cw=e,this.ch=s,this.width=i,this.height=n}init(){this.ctx.clearRect(0,0,this.width,this.height),this.drawerBorder(),this.drawerLine()}drawerBorder(){const{ctx:t,width:e,height:s,borderWidth:i}=this;t.lineWidth=i,t.strokeStyle=p(),t.strokeRect(i/2,i/2,e-i,s-i)}drawerLine(){const{ctx:t,width:e,height:s,cw:i,ch:n,borderWidth:r}=this,o=Math.ceil(e/i),l=Math.ceil(s/n);let h=1;for(;h<o;)t.beginPath(),t.fillStyle=p(),t.fillRect(h*i-r/2,r,r,s-2*r),t.closePath(),h++;let a=1;for(;a<l;)t.beginPath(),t.fillStyle=p(),t.fillRect(r,a*n-r/2,e-2*r,r),t.closePath(),a++}paintCell(t){const e=this.ctx,{color:s,coordinate:{x:i,y:n},lineWidth:r,size:{w:o,h:l}}=t,h=i*o,a=n*l;e.clearRect(h,a,o,l),e.lineWidth=r,e.strokeStyle=s,e.strokeRect(h,a,o,l),e.fillStyle=s,e.fillRect(h,a,o,l)}paintCellList(t){let e=0,s=t.length;for(;e<s;){const i=t[e];let n=0;for(;n<i.length;){const r=i[n];this.paintCell(r),n++}e++}}paintShapeByCoordinate({coordinate:t,shape:e,cellList:s,color:i}){i=i||p();const{x:n,y:r}=t,o=e.map(([l,h])=>{const a=s[r+h][n+l];return a.changeColor(i),[a]});console.log(o),this.paintCellList(o)}}class k{constructor({coordinate:t,size:e,color:s,lineWidth:i}){this.coordinate=t,this.size=e,this.color=s,this.lineWidth=i}changeColor(t){this.color=t}}class b{constructor({width:t,height:e,cw:s,ch:i}){const n=Math.ceil(t/s),r=Math.ceil(e/i);this.xNum=n,this.yNum=r,this.cw=s,this.ch=i}getCellList(){if(this.gridList)return this.gridList;const{yNum:t,xNum:e,cw:s,ch:i}=this,n=[];let r=0;for(;r<t;){const o=[];let l=0;for(;l<e;){const h=new k({coordinate:{x:l,y:r},size:{w:s,h:i},color:"#fff",lineWidth:2});o.push(h),l++}n.push(o),r++}return this.gridList=n,n}}class M{constructor({canvasId:t,cSize:e,width:s,height:i}){const n=document.getElementById(t),r=n.getContext("2d");n.width=s,n.height=i,this.grid=new b({width:s,height:i,cw:e,ch:e}),this.drawer=new N({ctx:r,width:s,height:i,cw:e,ch:e}),this.shape=new B,this.listener()}getCellList(){return this.grid.getCellList()}getCurrentCoordinate(){return{x:3,y:0}}init(){const t=this.getCellList();console.log("cellList:",t),this.drawer.paintCellList(t);const e=this.shape.next(),s={x:3,y:0};this.drawer.paintShapeByCoordinate({coordinate:s,shape:e,cellList:t})}listener(){window.addEventListener("keydown",t=>{const e=t.key;if(e==="ArrowUp")this.changeShape();else if(e==="ArrowDown"){const s=this.shape.next();this.drawer.paint({x:3,y:0},s)}})}changeShape(){const t=this.getCurrentCoordinate(),e=this.shape.getCurrentShape();this.drawer.paintShapeByCoordinate({coordinate:t,shape:e,cellList:this.getCellList(),color:"#fff"});const s=this.shape.changeShape();this.drawer.paintShapeByCoordinate({coordinate:t,shape:s,cellList:this.getCellList()})}}const g=32,P=g*9,R=g*16,W=new M({canvasId:"canvas",cSize:g,width:P,height:R});W.init();
